;;; otrenav-theme.el -- A light material design theme

;; Author: Omar Trejo
;; URL:
;; Version: 0.1

;; MIT License

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

(deftheme otrenav "A light material design theme")

(defvar otrenav-colors-alist
  '(("grey-one"   . "#edf3f7")
    ("grey-two"   . "#d0d5d9")
    ("grey-three" . "#9fa3a6")
    ("grey-four"  . "#6e7173")
    ("grey-five"  . "#565859")
    ("grey-six"   . "#3d3f40")

    ("cyan-one"   . "#00bcd4")
    ("cyan-two"   . "#0097a7")

    ("green-one"  . "#4caf50")
    ("green-two"  . "#388e3c")

    ("blue-one"   . "#2196f3")
    ("blue-two"   . "#1976d2")

    ("purple-one" . "#9c27b0")
    ("purple-two" . "#7b1fa2")

    ("yellow-one" . "#ffc107")
    ("yellow-two" . "#ffa000")

    ("orange-one" . "#ff9800")
    ("orange-two" . "#f57c00")

    ("red-one"    . "#f44336")
    ("red-two"    . "#d32f2f"))
  "Light material design colors.")

(defmacro otrenav/with-color-variables (&rest body)
  "`let' bind all colors defined in `otrenav-colors-alist' around BODY.
Also bind `class' to ((class color) (min-colors 89))."
  (declare (indent 0))
  `(let ((class '((class color) (min-colors 89)))
         ,@(mapcar (lambda (cons)
                     (list (intern (car cons)) (cdr cons)))
                   otrenav-colors-alist))
     ,@body))

(otrenav/with-color-variables
 (custom-theme-set-faces
  'otrenav

  ;; Basic coloring

  '(button ((t (:underline t))))
  `(link ((t (:foreground ,blue-one :underline t :weight bold))))
  `(link-visited ((t (:foreground ,purple-one :underline t :weight normal))))
  `(default ((t (:foreground ,grey-six :background ,grey-one))))
  `(cursor ((t (:foreground ,grey-six :background ,grey-five))))
  `(escape-glyph ((t (:foreground ,yellow-one :bold t))))
  `(fringe ((t (:foreground ,grey-five :background ,grey-two))))
  `(header-line ((t (:foreground ,cyan-two
                                 :background ,grey-five
                                 :box (:line-width -1 :style released-button)))))
  `(highlight ((t (:background ,grey-two))))
  `(success ((t (:foreground ,green-two :weight bold))))
  `(warning ((t (:foreground ,orange-two :weight bold))))

  ;; Compilation

  `(compilation-column-face ((t (:foreground ,yellow-two))))
  `(compilation-enter-directory-face ((t (:foreground ,cyan-two))))
  `(compilation-error-face ((t (:foreground ,red-two :weight bold :underline t))))
  `(compilation-face ((t (:foreground ,grey-six))))
  `(compilation-info-face ((t (:foreground ,blue-one))))
  `(compilation-info ((t (:foreground ,green-two :underline t))))
  `(compilation-leave-directory-face ((t (:foreground ,purple-two))))
  `(compilation-line-face ((t (:foreground ,yellow-one))))
  `(compilation-line-number ((t (:foreground ,yellow-one))))
  `(compilation-message-face ((t (:foreground ,grey-five))))
  `(compilation-warning-face ((t (:foreground ,orange-two :weight bold :underline t))))
  `(compilation-mode-line-exit ((t (:foreground ,cyan-one :weight bold))))
  `(compilation-mode-line-fail ((t (:foreground ,red-two :weight bold))))
  `(compilation-mode-line-run ((t (:foreground ,yellow-two :weight bold))))

  ;; Grep

  `(grep-context-face ((t (:foreground ,grey-five))))
  `(grep-error-face ((t (:foreground ,red-two :weight bold :underline t))))
  `(grep-hit-face ((t (:foreground ,cyan-one :weight bold))))
  `(grep-match-face ((t (:foreground ,yellow-one :weight bold))))
  `(match ((t (:background ,cyan-one :foreground ,grey-five))))

  ;; isearch

  `(isearch ((t (:foreground ,grey-one :weight bold :background ,red-one))))
  `(isearch-fail ((t (:foreground ,yellow-one :weight bold :background ,red-two))))
  `(lazy-highlight ((t (:foreground ,grey-one :weight bold :background ,blue-one))))

  `(menu ((t (:foreground ,grey-six :background ,grey-two))))
  `(minibuffer-prompt ((t (:foreground ,grey-five :weight bold))))
  `(region ((,class (:background ,blue-one :foreground ,grey-one))
            (t :inverse-video t)))
  `(secondary-selection ((t (:background ,cyan-one))))
  `(trailing-whitespace ((t (:background ,red-one))))
  `(vertical-border ((t (:foreground ,grey-two))))

  ;; Font lock

  `(font-lock-builtin-face ((t (:foreground ,cyan-two))))
  `(font-lock-comment-face ((t (:foreground ,grey-four))))
  `(font-lock-comment-delimiter-face ((t (:foreground ,grey-three))))
  `(font-lock-constant-face ((t (:foreground ,green-two))))
  `(font-lock-doc-face ((t (:foreground ,grey-four))))
  `(font-lock-function-name-face ((t (:foreground ,grey-five :weight bold))))
  `(font-lock-keyword-face ((t (:foreground ,blue-one))))
  `(font-lock-negation-char-face ((t (:foreground ,red-one :weight bold))))
  `(font-lock-preprocessor-face ((t (:foreground ,red-one :weight bold))))
  `(font-lock-regexp-grouping-construct ((t (:foreground ,yellow-two :weight bold))))
  `(font-lock-regexp-grouping-backslash ((t (:foreground ,purple-one :weight bold))))
  `(font-lock-string-face ((t (:foreground ,green-one))))
  `(font-lock-type-face ((t (:foreground ,blue-one))))
  `(font-lock-variable-name-face ((t (:foreground ,orange-two))))
  `(font-lock-warning-face ((t (:foreground ,orange-two :weight bold))))

  `(c-annotation-face ((t (:inherit font-lock-constant-face))))

  ;; Acejump, agile movement to characters in buffer

  `(ace-jump-face-background
    ((t (:foreground ,grey-three :background ,grey-two :inverse-video nil))))
  `(ace-jump-face-foreground
    ((t (:foreground ,red-one :background ,grey-one :inverse-video nil))))

  ;; Anzu, display isearch counts on mode-line

  `(anzu-mode-line ((t (:foreground ,cyan-one :weight bold))))

  ;; Auto-complete

  `(ac-candidate-face ((t (:background ,grey-three :foreground ,grey-six))))
  `(ac-selection-face ((t (:background ,grey-four :foreground ,grey-six))))
  `(popup-tip-face ((t (:background ,blue-one :foreground ,grey-one))))
  `(popup-scroll-bar-foreground-face ((t (:background ,grey-four))))
  `(popup-scroll-bar-background-face ((t (:background ,grey-two))))
  `(popup-isearch-match ((t (:background ,grey-one :foreground ,grey-six))))

  ;; TODO: bm, visible bookmarks

  ;; `(bm-face ((t (:background ,zenburn-yellow-1 :foreground ,zenburn-bg))))
  ;; `(bm-fringe-face ((t (:background ,zenburn-yellow-1 :foreground ,zenburn-bg))))
  ;; `(bm-fringe-persistent-face ((t (:background ,zenburn-green-1 :foreground ,zenburn-bg))))
  ;; `(bm-persistent-face ((t (:background ,zenburn-green-1 :foreground ,zenburn-bg))))

  ;; Clojure test-mode

  `(clojure-test-failure-face ((t (:foreground ,orange-one :weight bold :underline t))))
  `(clojure-test-error-face ((t (:foreground ,red-one :weight bold :underline t))))
  `(clojure-test-success-face ((t (:foreground ,green-one :weight bold :underline t))))

  ;; Diff

  `(diff-added ((,class (:foreground ,green-two :background ,grey-one))
                (t (:foreground ,green-two :background ,grey-one))))
  `(diff-changed ((t (:foreground ,orange-one))))
  `(diff-context ((t (:foreground ,grey-three))))
  `(diff-removed ((,class (:foreground ,red-one :background ,grey-one))
                  (t (:foreground ,red-one :background ,grey-one))))
  `(diff-refine-added ((t :inherit diff-added :background ,green-one :weight bold)))
  `(diff-refine-change ((t :inherit diff-changed :weight bold)))
  `(diff-refine-removed ((t :inherit diff-removed :background ,red-two :weight bold)))
  `(diff-header ((,class (:foreground ,grey-six :weight bold))
                 (t (:foreground ,grey-six :weight bold))))
  `(diff-file-header
    ((,class (:foreground ,grey-six :weight bold))
     (t (:foreground ,grey-six :weight bold))))
  `(diff-hunk-header
    ((,class (:foreground ,purple-two :weight bold))
     (t (:foreground ,purple-two :weight bold))))

  ;; Diff-hl

  `(diff-hl-insert ((t (:foreground ,cyan-two :background ,green-two))))
  `(diff-hl-delete ((t (:foreground ,red-two :background ,red-one))))
  `(diff-hl-change ((t (:foreground ,orange-two :background ,orange-one))))

  ;; Dired, Dired+, Dired-subtree

  `(diredp-display-msg ((t (:foreground ,blue-two))))
  `(diredp-compressed-file-suffix ((t (:foreground ,purple-one))))
  `(diredp-date-time ((t (:foreground ,orange-one))))
  `(diredp-deletion ((t (:foreground ,red-one))))
  `(diredp-deletion-file-name ((t (:foreground ,red-one))))
  `(diredp-dir-heading ((t (:foreground ,blue-one :background ,grey-two :weight bold))))
  `(diredp-dir-priv ((t (:foreground ,blue-one))))
  `(diredp-exec-priv ((t (:foreground ,orange-one))))
  `(diredp-executable-tag ((t (:foreground ,orange-two))))
  `(diredp-file-name ((t (:foreground ,grey-six))))
  `(diredp-file-suffix ((t (:foreground ,purple-two))))
  `(diredp-flag-mark ((t (:foreground ,yellow-one))))
  `(diredp-flag-mark-line ((t (:foreground ,yellow-two))))
  `(diredp-ignored-file-name ((t (:foreground ,grey-three))))
  `(diredp-link-priv ((t (:foreground ,purple-one))))
  `(diredp-mode-line-flagged ((t (:foreground ,yellow-one))))
  `(diredp-mode-line-marked ((t (:foreground ,yellow-two))))
  `(diredp-no-priv ((t (:foreground ,grey-six))))
  `(diredp-number ((t (:foreground ,blue-two))))
  `(diredp-other-priv ((t (:foreground ,grey-five))))
  `(diredp-rare-priv ((t (:foreground ,orange-two))))
  `(diredp-read-priv ((t (:foreground ,cyan-two))))
  `(diredp-symlink ((t (:foreground ,grey-one :background ,purple-one))))
  `(diredp-write-priv ((t (:foreground ,orange-two))))
  `(dired-subtree-depth-1-face ((t (:background ,grey-two))))
  `(dired-subtree-depth-2-face ((t (:background ,grey-three))))
  `(dired-subtree-depth-3-face ((t (:background ,grey-four))))

  ;; Ediff

  `(ediff-current-diff-A ((t (:foreground ,grey-six :background ,red-one))))
  `(ediff-current-diff-Ancestor ((t (:foreground ,grey-six :background ,red-one))))
  `(ediff-current-diff-B ((t (:foreground ,grey-six :background ,green-one))))
  `(ediff-current-diff-C ((t (:foreground ,grey-one :background ,blue-one))))
  `(ediff-even-diff-A ((t (:background ,grey-one))))
  `(ediff-even-diff-Ancestor ((t (:background ,grey-one))))
  `(ediff-even-diff-B ((t (:background ,grey-two))))
  `(ediff-even-diff-C ((t (:background ,grey-two))))
  `(ediff-fine-diff-A ((t (:foreground ,grey-six :background ,red-one :weight bold))))
  `(ediff-fine-diff-Ancestor ((t (:foreground ,grey-six :background ,red-one weight bold))))
  `(ediff-fine-diff-B ((t (:foreground ,grey-six :background ,green-one :weight bold))))
  `(ediff-fine-diff-C ((t (:foreground ,grey-one :background ,blue-one :weight bold ))))
  `(ediff-odd-diff-A ((t (:background ,grey-two))))
  `(ediff-odd-diff-Ancestor ((t (:background ,grey-two))))
  `(ediff-odd-diff-B ((t (:background ,grey-two))))
  `(ediff-odd-diff-C ((t (:background ,grey-two))))

  ;; Eshell

  `(eshell-prompt ((t (:foreground ,red-two :weight bold))))
  `(eshell-ls-archive ((t (:foreground ,purple-one :weight bold))))
  `(eshell-ls-backup ((t (:inherit font-lock-comment-face))))
  `(eshell-ls-clutter ((t (:inherit font-lock-comment-face))))
  `(eshell-ls-directory ((t (:foreground ,blue-one :weight bold))))
  `(eshell-ls-executable ((t (:foreground ,orange-two))))
  `(eshell-ls-unreadable ((t (:foreground ,grey-three))))
  `(eshell-ls-missing ((t (:inherit font-lock-warning-face))))
  `(eshell-ls-product ((t (:inherit font-lock-doc-face))))
  `(eshell-ls-special ((t (:foreground ,yellow-one :weight bold))))
  `(eshell-ls-symlink ((t (:foreground ,grey-one :background ,purple-one))))

  ;; Flycheck, check syntax as you type

  `(flycheck-error
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,red-one) :inherit unspecified))
     (t (:foreground ,red-one :weight bold :underline t))))
  `(flycheck-warning
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,yellow-two) :inherit unspecified))
     (t (:foreground ,yellow-one :weight bold :underline t))))
  `(flycheck-info
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,purple-two) :inherit unspecified))
     (t (:foreground ,purple-one :weight bold :underline t))))
  `(flycheck-fringe-error ((t (:foreground ,red-two :weight bold))))
  `(flycheck-fringe-warning ((t (:foreground ,yellow-two :weight bold))))
  `(flycheck-fringe-info ((t (:foreground ,purple-two :weight bold))))

  ;; Flymake, check syntax as you type

  `(flymake-errline
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,red-one)
                  :inherit unspecified :foreground unspecified :background unspecified))
     (t (:foreground ,red-one :weight bold :underline t))))
  `(flymake-warnline
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,yellow-two)
                  :inherit unspecified :foreground unspecified :background unspecified))
     (t (:foreground ,yellow-two :weight bold :underline t))))
  `(flymake-infoline
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,purple-two)
                  :inherit unspecified :foreground unspecified :background unspecified))
     (t (:foreground ,purple-two :weight bold :underline t))))

  ;; Flyspell, check spelling as you type

  `(flyspell-duplicate
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,yellow-two) :inherit unspecified))
     (t (:foreground ,yellow-two :weight bold :underline t))))
  `(flyspell-incorrect
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,red-one) :inherit unspecified))
     (t (:foreground ,red-one :weight bold :underline t))))

  ;; Git gutter

  `(git-gutter:added ((t (:foreground ,green-one :weight bold))))
  `(git-gutter:deleted ((t (:foreground ,red-one :weight bold))))
  `(git-gutter:modified ((t (:foreground ,orange-one :weight bold))))
  `(git-gutter:unchanged ((t (:foreground ,grey-six :weight bold))))

  ;; Git gutter-fringe

  `(git-gutter-fr:added ((t (:foreground ,green-one  :weight bold))))
  `(git-gutter-fr:deleted ((t (:foreground ,red-one :weight bold))))
  `(git-gutter-fr:modified ((t (:foreground ,orange-one :weight bold))))

  ;; Guide-key, display available keybindings

  `(guide-key/highlight-command-face ((t (:foreground ,blue-one))))
  `(guide-key/key-face ((t (:foreground ,yellow-two))))
  `(guide-key/prefix-command-face ((t (:foreground ,purple-two))))

  ;; Helm, incremental completion and selection narrowing framework

  `(helm-action ((t (:underline nil))))
  `(helm-selection ((t (:background ,blue-one :underline nil :weight bold))))
  `(helm-candidate-number ((t (:foreground ,cyan-one))))
  `(helm-source-header ((t (:foreground ,grey-six :weight bold))))
  `(helm-visible-mark ((t (:foreground ,red-one))))
  `(helm-ff-directory ((t (:foreground ,blue-one))))
  `(helm-ff-executable ((t (:foreground ,orange-two))))
  `(helm-ff-symlink ((t (:foreground ,grey-one :background ,purple-one))))
  `(helm-ff-prefix ((t (:foreground ,red-one))))
  `(helm-M-x-key ((t (:foreground ,grey-four))))
  `(helm-grep-file ((t (:foreground ,cyan-one))))
  `(helm-grep-lineno ((t (:foreground ,grey-four))))
  `(helm-grep-running ((t (:foreground ,red-one))))
  `(helm-grep-finish ((t (:foreground ,cyan-one))))
  `(helm-buffer-saved-out ((t (:foreground ,yellow-two :background nil))))
  `(helm-moccur-buffer ((t (:foreground ,grey-four))))

  ;; Highlight symbol

  `(highlight-symbol-face ((t (:background "gray88" :underline t))))

  ;; Highlight line-mode

  `(hl-line-face ((,class (:background ,grey-two))
                  (t :weight bold)))
  `(hl-line ((,class (:background ,grey-two)) ; old emacsen
             (t :weight bold)))

  ;; Hl-sexp, highlight for s-expressions

  `(hl-sexp-face ((,class (:background ,grey-two))
                  (t :weight bold)))

  ;; ido-mode, interactively do things

  `(ido-first-match ((t (:foreground ,orange-two :weight bold))))
  `(ido-only-match ((t (:foreground ,orange-one :weight bold))))
  `(ido-subdir ((t (:foreground ,yellow-two))))
  `(ido-indicator ((t (:foreground ,yellow-one :background ,orange-two))))

  ;; Indentation

  `(indent-guide-face ((t (:foreground ,grey-three))))

  ;; JavaScript

  `(js2-warning ((t (:underline ,orange-two))))
  `(js2-error ((t (:foreground ,red-one :weight bold))))
  `(js2-jsdoc-tag ((t (:foreground ,purple-one))))
  `(js2-jsdoc-type ((t (:foreground ,purple-two))))
  `(js2-jsdoc-value ((t (:foreground ,blue-one))))
  `(js2-function-param ((t (:foreground, grey-five))))
  `(js2-external-variable ((t (:foreground ,orange-two))))

  ;; Linum-mode, line numbers on fringe

  `(linum ((t (:foreground ,grey-three :background ,grey-two))))

  ;; Magit, git interface

  `(magit-header ((t (:foreground ,grey-six
                                  :background nil
                                  :weight bold))))
  `(magit-section-title ((t (:foreground ,grey-six
                                         :background nil
                                         :weight bold))))
  `(magit-branch ((t (:foreground ,grey-six
                                  :background ,cyan-one
                                  :weight bold
                                  :box (:line-width 1 :color ,cyan-two)))))
  `(magit-item-highlight ((t (:background ,grey-two))))
  `(magit-log-author ((t (:foreground ,blue-two))))
  `(magit-log-sha1 ((t (:foreground ,orange-one :weight bold))))
  `(magit-tag ((t (:foreground ,purple-two :weight bold))))
  `(magit-log-head-label-head ((t (:foreground ,grey-six
                                               :background ,cyan-one
                                               :weight bold
                                               :box (:line-width 1 :color ,cyan-two)))))
  `(magit-log-head-label-local ((t (:foreground ,grey-six
                                                :background ,cyan-one
                                                :weight bold
                                                :box (:line-width 1 :color ,cyan-two)))))
  `(magit-log-head-label-default ((t (:foreground ,grey-six
                                                  :background ,cyan-one
                                                  :weight bold
                                                  :box (:line-width 1 :color ,cyan-two)))))
  `(magit-log-head-label-remote ((t (:foreground ,grey-one
                                                 :background ,blue-one
                                                 :weight bold
                                                 :box (:line-width 1 :color ,yellow-two)))))
  `(magit-log-head-label-tags ((t (:foreground ,purple-two :weight bold))))

  ;; Outline, general outline mode for Emacs

  `(outline-1 ((t (:foreground ,cyan-two))))
  `(outline-2 ((t (:foreground ,blue-two))))
  `(outline-3 ((t (:foreground ,purple-two))))
  `(outline-4 ((t (:foreground ,yellow-two))))
  `(outline-5 ((t (:foreground ,orange-two))))
  `(outline-6 ((t (:foreground ,red-two))))

  ;; Rainbow delimiters: parenthesis, brackets, ...

  `(rainbow-delimiters-depth-1-face ((t (:foreground ,grey-five))))
  `(rainbow-delimiters-depth-2-face ((t (:foreground ,cyan-one))))
  `(rainbow-delimiters-depth-3-face ((t (:foreground ,green-one))))
  `(rainbow-delimiters-depth-4-face ((t (:foreground ,blue-one))))
  `(rainbow-delimiters-depth-5-face ((t (:foreground ,purple-one))))
  `(rainbow-delimiters-depth-6-face ((t (:foreground ,yellow-one))))
  `(rainbow-delimiters-depth-7-face ((t (:foreground ,orange-one))))
  `(rainbow-delimiters-depth-8-face ((t (:foreground ,red-one))))
  `(rainbow-delimiters-depth-9-face ((t (:foreground ,cyan-two))))
  `(rainbow-delimiters-depth-10-face ((t (:foreground ,green-two))))
  `(rainbow-delimiters-depth-11-face ((t (:foreground ,blue-two))))
  `(rainbow-delimiters-depth-12-face ((t (:foreground ,purple-two))))

  ;; Show parenthesis mode

  `(show-paren-mismatch ((t (:foreground ,yellow-one :background ,red-two :weight bold))))
  `(show-paren-match ((t (:foreground ,grey-one :background ,red-one :weight bold))))

  ;; SLIME, superior lisp interaction mode

  `(slime-repl-output-face ((t (:foreground ,grey-six))))
  `(slime-repl-inputed-output-face ((t (:foreground ,grey-five))))
  `(slime-error-face
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,red-one)))
     (t
      (:underline ,red-one))))
  `(slime-warning-face
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,yellow-two)))
     (t
      (:underline ,yellow-two))))
  `(slime-style-warning-face
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,yellow-one)))
     (t
      (:underline ,yellow-one))))
  `(slime-note-face
    ((((supports :underline (:style wave)))
      (:underline (:style wave :color ,purple-two)))
     (t
      (:underline ,purple-two))))
  `(slime-highlight-face ((t (:inherit cyan-one))))

  ;; Terminal

  `(term-color-black ((t (:foreground ,grey-six :background ,grey-six))))
  `(term-color-red ((t (:foreground ,red-two :background ,red-two))))
  `(term-color-green ((t (:foreground ,green-two :background ,green-two))))
  `(term-color-yellow ((t (:foreground ,yellow-two :background ,yellow-two))))
  `(term-color-blue ((t (:foreground ,blue-two :background ,blue-two))))
  `(term-color-magenta ((t (:foreground ,purple-two :background ,purple-two))))
  `(term-color-cyan ((t (:foreground ,cyan-two :background ,cyan-two))))
  `(term-color-white ((t (:foreground ,grey-one :background ,grey-one))))
  '(term-default-fg-color ((t (:inherit term-color-white))))
  '(term-default-bg-color ((t (:inherit term-color-black))))

  ;; Web mode

  `(web-mode-builtin-face ((t (:inherit ,font-lock-builtin-face))))
  `(web-mode-comment-face ((t (:inherit ,font-lock-comment-face))))
  `(web-mode-constant-face ((t (:inherit ,font-lock-constant-face))))
  `(web-mode-css-at-rule-face ((t (:foreground ,orange-two ))))
  `(web-mode-css-prop-face ((t (:foreground ,orange-two))))
  `(web-mode-css-pseudo-class-face ((t (:foreground ,yellow-two :weight bold))))
  `(web-mode-css-rule-face ((t (:foreground ,blue-two))))
  `(web-mode-doctype-face ((t (:inherit ,font-lock-comment-face))))
  `(web-mode-folded-face ((t (:underline t))))
  `(web-mode-function-name-face ((t (:foreground ,grey-six :weight bold))))
  `(web-mode-html-attr-name-face ((t (:foreground ,purple-two))))
  `(web-mode-html-attr-value-face ((t (:inherit ,font-lock-string-face))))
  `(web-mode-html-tag-face ((t (:foreground ,cyan-one :weight bold))))
  `(web-mode-keyword-face ((t (:inherit ,font-lock-keyword-face))))
  `(web-mode-preprocessor-face ((t (:inherit ,font-lock-preprocessor-face))))
  `(web-mode-string-face ((t (:inherit ,font-lock-string-face))))
  `(web-mode-type-face ((t (:inherit ,font-lock-type-face))))
  `(web-mode-variable-name-face ((t (:inherit ,font-lock-variable-name-face))))
  `(web-mode-server-background-face ((t (:background ,grey-one))))
  `(web-mode-server-comment-face ((t (:inherit web-mode-comment-face))))
  `(web-mode-server-string-face ((t (:foreground ,red-one))))
  `(web-mode-symbol-face ((t (:inherit font-lock-constant-face))))
  `(web-mode-warning-face ((t (:inherit font-lock-warning-face))))
  `(web-mode-whitespaces-face ((t (:background ,red-one))))
  `(web-mode-block-face ((t (:background "gray88"))))
  `(web-mode-current-element-highlight-face ((t (:inverse-video t))))

  ;; Whitespace mode

  `(whitespace-space ((t (:background ,grey-one :foreground ,yellow-one))))
  `(whitespace-hspace ((t (:background ,grey-one :foreground ,yellow-one))))
  `(whitespace-tab ((t (:background ,orange-one))))
  `(whitespace-newline ((t (:foreground ,yellow-one))))
  `(whitespace-trailing ((t (:background ,red-one))))
  `(whitespace-line ((t (:background nil :foreground ,red-one))))
  `(whitespace-space-before-tab ((t (:background ,grey-one :foreground ,red-one))))
  `(whitespace-indentation ((t (:background ,grey-one :foreground ,yellow-one))))
  `(whitespace-empty ((t (:background ,yellow-two))))
  `(whitespace-space-after-tab ((t (:background ,grey-one :foreground ,red-one))))

  ))

;;
;; Theme Variables
;;

(otrenav/with-color-variables
 (custom-theme-set-variables
  'otrenav

  ;; ANSI Color

  `(ansi-color-names-vector [,grey-one ,red-one ,green-one ,yellow-one
                                     ,blue-one ,purple-one ,cyan-one ,grey-six])
  ;; Fill column indicator

  `(fci-rule-color ,yellow-one)

  ;; Highlight parenthesis

  `(hl-paren-colors '(,grey-one ,grey-one ,orange-one))
  `(hl-paren-background-colors '(,blue-one ,grey-three nil))
  ))

;; Footer

;;;###autoload
(and load-file-name
     (boundp 'custom-theme-load-path)
     (add-to-list 'custom-theme-load-path
                  (file-name-as-directory
                   (file-name-directory load-file-name))))

(provide-theme 'otrenav)

;; Local Variables:
;; no-byte-compile: t
;; indent-tabs-mode: nil
;; End:
;;; otrenav-theme.el ends here
