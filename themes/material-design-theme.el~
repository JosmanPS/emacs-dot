;;; material-design-theme.el -- A light material design theme

;; Author: Omar Trejo
;; URL:
;; Version: 0.1

;;; Commentary:

;; MIT License

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;;; Code:

(deftheme material-design "A light material design theme")

(defvar material-design-colors-alist
  '(("foreground"   . "#edf3f7")
    ("background"   . "#3d3f40")
    ("light-grey-one" . "#dce1e6")
    ("light-grey-two" . "#9fa3a6")
    ("dark-grey-one"  . "#6e7173")
    ("dark-grey-two"  . "#565859")
    ("cyan"   . "#00bcd4")
    ("green"  . "#4caf50")
    ("blue"   . "#2196f3")
    ("purple" . "#9c27b0")
    ("yellow" . "#ffc107")
    ("orange" . "#ff9800")
    ("red"    . "#f44336")))

(defmacro material-design/with-color-variables (&rest body)
  "`let' bind all colors defined in `material-design-colors-alist' around BODY.
Also bind `class' to ((class color) (min-colors 89))."
  (declare (indent 0))
  `(let ((class '((class color) (min-colors 89)))
         ,@(mapcar (lambda (cons)
                     (list (intern (car cons)) (cdr cons)))
                   material-design-colors-alist)) ,@body))

(material-design/with-color-variables
  (custom-theme-set-faces
   'material-design

   ;; Acejump, agile movement to characters in buffer

   `(ace-jump-face-background
     ((t (:foreground ,light-grey-two :background ,light-grey-one :inverse-video nil))))
   `(ace-jump-face-foreground
     ((t (:foreground ,red :background ,foreground :inverse-video nil))))

   ;; Anzu, display isearch counts on mode-line

   `(anzu-mode-line ((t (:foreground ,orange))))
   `(anzu-mode-line ((,class (:foreground ,orange))))
   `(anzu-replace-highlight ((,class (:inherit isearch-lazy-highlight-face))))
   `(anzu-replace-to ((,class (:inherit isearch))))

   ;; Auto-complete

   `(ac-candidate-face ((t (:background ,light-grey-two :foreground ,background))))
   `(ac-selection-face ((t (:background ,dark-grey-one :foreground ,background))))
   `(popup-tip-face ((t (:background ,blue :foreground ,foreground))))
   `(popup-scroll-bar-foreground-face ((t (:background ,dark-grey-one))))
   `(popup-scroll-bar-background-face ((t (:background ,light-grey-one))))
   `(popup-isearch-match ((t (:background ,foreground :foreground ,background))))

   ;; Basic coloring

   '(button ((t (:underline t))))
   `(link ((t (:foreground ,blue :underline t :weight bold))))
   `(link-visited ((t (:foreground ,purple :underline t :weight normal))))
   `(default ((t (:foreground ,background :background ,foreground))))
   `(cursor ((t (:foreground ,background :background ,dark-grey-two))))
   `(escape-glyph ((t (:foreground ,yellow :bold t))))
   `(fringe ((t (:foreground ,dark-grey-two :background ,light-grey-one))))
   `(header-line ((t (:foreground ,cyan
                                  :background ,dark-grey-two
                                  :box (:line-width -1 :style released-button)))))
   `(highlight ((t (:background ,light-grey-one))))
   `(success ((t (:foreground ,green :weight bold))))
   `(warning ((t (:foreground ,orange :weight bold))))
   `(error ((t (:foreground ,red :weight bold))))

   ;; TODO: bm, visible bookmarks

   ;; `(bm-face ((t (:background ,zenburn-yellow-1 :foreground ,zenburn-bg))))
   ;; `(bm-fringe-face ((t (:background ,zenburn-yellow-1 :foreground ,zenburn-bg))))
   ;; `(bm-fringe-persistent-face ((t (:background ,zenburn-green-1 :foreground ,zenburn-bg))))
   ;; `(bm-persistent-face ((t (:background ,zenburn-green-1 :foreground ,zenburn-bg))))

   ;; Compilation

   `(compilation-column-face ((t (:foreground ,yellow))))
   `(compilation-enter-directory-face ((t (:foreground ,cyan))))
   `(compilation-error-face ((t (:foreground ,red :weight bold :underline t))))
   `(compilation-face ((t (:foreground ,background))))
   `(compilation-info-face ((t (:foreground ,blue))))
   `(compilation-info ((t (:foreground ,green :underline t))))
   `(compilation-leave-directory-face ((t (:foreground ,purple))))
   `(compilation-line-face ((t (:foreground ,yellow))))
   `(compilation-line-number ((t (:foreground ,yellow))))
   `(compilation-message-face ((t (:foreground ,dark-grey-two))))
   `(compilation-warning-face ((t (:foreground ,orange :weight bold :underline t))))
   `(compilation-mode-line-exit ((t (:foreground ,cyan :weight bold))))
   `(compilation-mode-line-fail ((t (:foreground ,red :weight bold))))
   `(compilation-mode-line-run ((t (:foreground ,yellow :weight bold))))

   ;; Grep

   `(grep-context-face ((t (:foreground ,dark-grey-two))))
   `(grep-error-face ((t (:foreground ,red :weight bold :underline t))))
   `(grep-hit-face ((t (:foreground ,cyan :weight bold))))
   `(grep-match-face ((t (:foreground ,yellow :weight bold))))
   `(match ((t (:background ,cyan :foreground ,dark-grey-two))))

   ;; Incremental search

   `(isearch ((t (:foreground ,foreground :weight bold :background ,red))))
   `(isearch-fail ((t (:foreground ,yellow :weight bold :background ,red))))
   `(lazy-highlight ((t (:foreground ,foreground :weight bold :background ,blue))))

   `(menu ((t (:foreground ,background :background ,light-grey-one))))
   `(minibuffer-prompt ((t (:foreground ,dark-grey-two :weight bold))))
   `(region ((,class (:background ,blue :foreground ,foreground))
             (t :inverse-video t)))
   `(secondary-selection ((t (:background ,cyan))))
   `(trailing-whitespace ((t (:background ,red))))
   `(vertical-border ((t (:foreground ,light-grey-one))))

   ;; Font lock

   `(font-lock-builtin-face ((t (:foreground ,cyan))))
   `(font-lock-comment-face ((t (:foreground ,dark-grey-one))))
   `(font-lock-comment-delimiter-face ((t (:foreground ,light-grey-two))))
   `(font-lock-constant-face ((t (:foreground ,green))))
   `(font-lock-doc-face ((t (:foreground ,dark-grey-one))))
   `(font-lock-function-name-face ((t (:foreground ,dark-grey-two :weight bold))))
   `(font-lock-keyword-face ((t (:foreground ,blue))))
   `(font-lock-negation-char-face ((t (:foreground ,red :weight bold))))
   `(font-lock-preprocessor-face ((t (:foreground ,red :weight bold))))
   `(font-lock-regexp-grouping-construct ((t (:foreground ,yellow :weight bold))))
   `(font-lock-regexp-grouping-backslash ((t (:foreground ,purple :weight bold))))
   `(font-lock-string-face ((t (:foreground ,green))))
   `(font-lock-type-face ((t (:foreground ,blue))))
   `(font-lock-variable-name-face ((t (:foreground ,orange))))
   `(font-lock-warning-face ((t (:foreground ,orange :weight bold))))
   `(c-annotation-face ((t (:inherit font-lock-constant-face))))

   ;; Diff

   `(diff-added ((,class (:foreground ,green :background ,foreground))
                 (t (:foreground ,green :background ,foreground))))
   `(diff-changed ((t (:foreground ,orange))))
   `(diff-context ((t (:foreground ,light-grey-two))))
   `(diff-removed ((,class (:foreground ,red :background ,foreground))
                   (t (:foreground ,red :background ,foreground))))
   `(diff-refine-added ((t :inherit diff-added :background ,green :weight bold)))
   `(diff-refine-change ((t :inherit diff-changed :weight bold)))
   `(diff-refine-removed ((t :inherit diff-removed :background ,red :weight bold)))
   `(diff-header ((,class (:foreground ,background :weight bold))
                  (t (:foreground ,background :weight bold))))
   `(diff-file-header
     ((,class (:foreground ,background :weight bold))
      (t (:foreground ,background :weight bold))))
   `(diff-hunk-header
     ((,class (:foreground ,purple :weight bold))
      (t (:foreground ,purple :weight bold))))

   ;; Diff-hl

   `(diff-hl-insert ((t (:foreground ,cyan :background ,green))))
   `(diff-hl-delete ((t (:foreground ,red :background ,red))))
   `(diff-hl-change ((t (:foreground ,orange :background ,orange))))

   ;; Dired, Dired+, Dired-subtree

   `(dired-subtree-depth-1-face ((t (:background ,light-grey-one))))
   `(dired-subtree-depth-2-face ((t (:background ,light-grey-two))))
   `(dired-subtree-depth-3-face ((t (:background ,dark-grey-one))))
   `(diredp-compressed-file-suffix ((t (:foreground ,purple))))
   `(diredp-date-time ((t (:foreground ,orange))))
   `(diredp-deletion ((t (:foreground ,red))))
   `(diredp-deletion-file-name ((t (:foreground ,red))))
   `(diredp-dir-heading ((t (:foreground ,blue :background ,light-grey-one :weight bold))))
   `(diredp-dir-priv ((t (:foreground ,blue))))
   `(diredp-display-msg ((t (:foreground ,blue))))
   `(diredp-exec-priv ((t (:foreground ,orange))))
   `(diredp-executable-tag ((t (:foreground ,orange))))
   `(diredp-file-name ((t (:foreground ,background))))
   `(diredp-file-suffix ((t (:foreground ,purple))))
   `(diredp-flag-mark ((t (:foreground ,yellow))))
   `(diredp-flag-mark-line ((t (:foreground ,yellow))))
   `(diredp-ignored-file-name ((t (:foreground ,light-grey-two))))
   `(diredp-link-priv ((t (:foreground ,purple))))
   `(diredp-mode-line-flagged ((t (:foreground ,yellow))))
   `(diredp-mode-line-marked ((t (:foreground ,yellow))))
   `(diredp-no-priv ((t (:foreground ,background))))
   `(diredp-number ((t (:foreground ,blue))))
   `(diredp-other-priv ((t (:foreground ,dark-grey-two))))
   `(diredp-rare-priv ((t (:foreground ,orange))))
   `(diredp-read-priv ((t (:foreground ,cyan))))
   `(diredp-symlink ((t (:foreground ,foreground :background ,purple))))
   `(diredp-write-priv ((t (:foreground ,orange))))

   ;; Ediff

   `(ediff-current-diff-A ((t (:foreground ,background :background ,red))))
   `(ediff-current-diff-Ancestor ((t (:foreground ,background :background ,red))))
   `(ediff-current-diff-B ((t (:foreground ,background :background ,green))))
   `(ediff-current-diff-C ((t (:foreground ,foreground :background ,blue))))
   `(ediff-even-diff-A ((t (:background ,foreground))))
   `(ediff-even-diff-Ancestor ((t (:background ,foreground))))
   `(ediff-even-diff-B ((t (:background ,light-grey-one))))
   `(ediff-even-diff-C ((t (:background ,light-grey-one))))
   `(ediff-fine-diff-A ((t (:foreground ,background :background ,red :weight bold))))
   `(ediff-fine-diff-Ancestor ((t (:foreground ,background :background ,red weight bold))))
   `(ediff-fine-diff-B ((t (:foreground ,background :background ,green :weight bold))))
   `(ediff-fine-diff-C ((t (:foreground ,foreground :background ,blue :weight bold ))))
   `(ediff-odd-diff-A ((t (:background ,light-grey-one))))
   `(ediff-odd-diff-Ancestor ((t (:background ,light-grey-one))))
   `(ediff-odd-diff-B ((t (:background ,light-grey-one))))
   `(ediff-odd-diff-C ((t (:background ,light-grey-one))))

   ;; Eshell

   `(eshell-prompt ((t (:foreground ,red :weight bold))))
   `(eshell-ls-archive ((t (:foreground ,purple :weight bold))))
   `(eshell-ls-backup ((t (:inherit font-lock-comment-face))))
   `(eshell-ls-clutter ((t (:inherit font-lock-comment-face))))
   `(eshell-ls-directory ((t (:foreground ,blue :weight bold))))
   `(eshell-ls-executable ((t (:foreground ,orange))))
   `(eshell-ls-unreadable ((t (:foreground ,light-grey-two))))
   `(eshell-ls-missing ((t (:inherit font-lock-warning-face))))
   `(eshell-ls-product ((t (:inherit font-lock-doc-face))))
   `(eshell-ls-special ((t (:foreground ,yellow :weight bold))))
   `(eshell-ls-symlink ((t (:foreground ,foreground :background ,purple))))

   ;; Flycheck, check syntax as you type

   `(flycheck-error
     ((((supports :underline (:style wave)))
       (:underline (:style wave :color ,red) :inherit unspecified))
      (t (:foreground ,red :weight bold :underline t))))
   `(flycheck-warning
     ((((supports :underline (:style wave)))
       (:underline (:style wave :color ,yellow) :inherit unspecified))
      (t (:foreground ,yellow :weight bold :underline t))))
   `(flycheck-info
     ((((supports :underline (:style wave)))
       (:underline (:style wave :color ,purple) :inherit unspecified))
      (t (:foreground ,purple :weight bold :underline t))))
   `(flycheck-fringe-error ((t (:foreground ,red :weight bold))))
   `(flycheck-fringe-warning ((t (:foreground ,yellow :weight bold))))
   `(flycheck-fringe-info ((t (:foreground ,purple :weight bold))))

   ;; Flymake, check syntax as you type

   `(flymake-errline
     ((((supports :underline (:style wave)))
       (:underline (:style wave :color ,red)
                   :inherit unspecified :foreground unspecified :background unspecified))
      (t (:foreground ,red :weight bold :underline t))))
   `(flymake-warnline
     ((((supports :underline (:style wave)))
       (:underline (:style wave :color ,yellow)
                   :inherit unspecified :foreground unspecified :background unspecified))
      (t (:foreground ,yellow :weight bold :underline t))))
   `(flymake-infoline
     ((((supports :underline (:style wave)))
       (:underline (:style wave :color ,purple)
                   :inherit unspecified :foreground unspecified :background unspecified))
      (t (:foreground ,purple :weight bold :underline t))))

   ;; Flyspell, check spelling as you type

   `(flyspell-duplicate
     ((((supports :underline (:style wave)))
       (:underline (:style wave :color ,yellow) :inherit unspecified))
      (t (:foreground ,yellow :weight bold :underline t))))
   `(flyspell-incorrect
     ((((supports :underline (:style wave)))
       (:underline (:style wave :color ,red) :inherit unspecified))
      (t (:foreground ,red :weight bold :underline t))))

   ;; Git gutter

   `(git-gutter:added ((t (:foreground ,green :weight bold))))
   `(git-gutter:deleted ((t (:foreground ,red :weight bold))))
   `(git-gutter:modified ((t (:foreground ,orange :weight bold))))
   `(git-gutter:unchanged ((t (:foreground ,background :weight bold))))

   ;; Git gutter-fringe

   `(git-gutter-fr:added ((t (:foreground ,green  :weight bold))))
   `(git-gutter-fr:deleted ((t (:foreground ,red :weight bold))))
   `(git-gutter-fr:modified ((t (:foreground ,orange :weight bold))))

   ;; Guide-key, display available keybindings

   `(guide-key/highlight-command-face ((t (:foreground ,blue))))
   `(guide-key/key-face ((t (:foreground ,yellow))))
   `(guide-key/prefix-command-face ((t (:foreground ,purple))))

   ;; Helm, incremental completion and selection narrowing framework

   `(helm-action ((t (:underline nil))))
   `(helm-selection ((t (:background ,blue :underline nil :weight bold))))
   `(helm-candidate-number ((t (:foreground ,cyan))))
   `(helm-source-header ((t (:foreground ,background :weight bold))))
   `(helm-visible-mark ((t (:foreground ,red))))
   `(helm-ff-directory ((t (:foreground ,blue))))
   `(helm-ff-executable ((t (:foreground ,orange))))
   `(helm-ff-symlink ((t (:foreground ,foreground :background ,purple))))
   `(helm-ff-prefix ((t (:foreground ,red))))
   `(helm-M-x-key ((t (:foreground ,dark-grey-one))))
   `(helm-grep-file ((t (:foreground ,cyan))))
   `(helm-grep-lineno ((t (:foreground ,dark-grey-one))))
   `(helm-grep-running ((t (:foreground ,red))))
   `(helm-grep-finish ((t (:foreground ,cyan))))
   `(helm-buffer-saved-out ((t (:foreground ,yellow :background nil))))
   `(helm-moccur-buffer ((t (:foreground ,dark-grey-one))))

   ;; Highlight line-mode

   `(hl-line-face ((,class (:background ,light-grey-one))
                   (t :weight bold)))
   `(hl-line ((,class (:background ,light-grey-one)) ; old emacsen
              (t :weight bold)))

   ;; Hl-sexp, highlight for s-expressions

   `(hl-sexp-face ((,class (:background ,light-grey-one))
                   (t :weight bold)))

   ;; ido-mode, interactively do things

   `(ido-first-match ((t (:foreground ,orange :weight bold))))
   `(ido-indicator ((t (:foreground ,yellow :background ,orange))))
   `(ido-only-match ((t (:foreground ,orange :weight bold))))
   `(ido-subdir ((t (:foreground ,yellow))))

   ;; Indentation

   `(indent-guide-face ((t (:foreground ,light-grey-two))))

   ;; JavaScript

   `(js2-warning ((t (:underline ,orange))))
   `(js2-error ((t (:foreground ,red :weight bold))))
   `(js2-jsdoc-tag ((t (:foreground ,purple))))
   `(js2-jsdoc-type ((t (:foreground ,purple))))
   `(js2-jsdoc-value ((t (:foreground ,blue))))
   `(js2-function-param ((t (:foreground, dark-grey-two))))
   `(js2-external-variable ((t (:foreground ,orange))))

   `(js3-warning-face ((,class (:underline ,orange))))
   `(js3-error-face ((,class (:foreground nil :underline ,red))))
   `(js3-external-variable-face ((,class (:foreground ,purple))))
   `(js3-function-param-face ((,class (:foreground ,blue))))
   `(js3-jsdoc-tag-face ((,class (:foreground ,orange))))
   `(js3-jsdoc-type-face ((,class (:foreground ,cyan))))
   `(js3-jsdoc-value-face ((,class (:foreground ,yellow))))
   `(js3-jsdoc-html-tag-name-face ((,class (:foreground ,blue))))
   `(js3-jsdoc-html-tag-delimiter-face ((,class (:foreground ,green))))
   `(js3-instance-member-face ((,class (:foreground ,blue))))
   `(js3-private-function-call-face ((,class (:foreground ,red))))

   ;; Linum-mode, line numbers on fringe

   `(linum ((t (:foreground ,light-grey-two :background ,light-grey-one))))

   ;; Markdown
   
   `(markdown-header-face-1 ((,class (:inherit font-lock-function-name-face :weight bold :height 1.3 ))))
   `(markdown-header-face-2 ((,class (:inherit font-lock-function-name-face :weight bold :height 1.2 ))))
   `(markdown-header-face-3 ((,class (:inherit font-lock-function-name-face :weight bold :height 1.1 ))))
   `(markdown-header-face-4 ((,class (:inherit font-lock-function-name-face :weight bold :height 1.1 ))))
   `(markdown-header-face-5 ((,class (:inherit font-lock-function-name-face :weight bold :height 1.1 ))))
   `(markdown-header-face-6 ((,class (:inherit font-lock-function-name-face :weight bold :height 1.1 ))))
   `(markdown-header-face-7 ((,class (:inherit font-lock-function-name-face :weight bold :height 1.1 ))))
   `(markdown-header-face-8 ((,class (:inherit font-lock-function-name-face :weight bold :height 1.1 ))))
   `(markdown-header-face-9 ((,class (:inherit font-lock-function-name-face :weight bold :height 1.1 ))))
   `(markdown-header-delimiter-face ((,class (:inherit font-lock-function-name-face :weight bold
                                                       :height 1.2))))
   `(markdown-url-face ((,class (:inherit link))))
   `(markdown-link-face ((,class (:foreground ,blue :underline t))))

   ;; Org-mode
   
   `(org-agenda-structure ((,class (:foreground ,cyan :bold t))))
   `(org-agenda-date ((,class (:foreground ,blue :underline nil))))
   `(org-agenda-done ((,class (:foreground ,green))))
   `(org-agenda-dimmed-todo-face ((,class (:foreground ,light-grey-one))))
   `(org-block ((,class (:foreground ,green :background ,background))))
   `(org-block-background ((,t (:background ,background))))
   `(org-code ((,class (:foreground ,green :background ,background))))
   `(org-column ((,class (:background ,dark-grey-one))))
   `(org-column-title ((,class (:inherit org-column :weight bold :underline t))))
   `(org-date ((,class (:foreground ,cyan :underline t))))
   `(org-document-info ((,class (:foreground ,cyan :height 1.35))))
   `(org-document-info-keyword ((,class (:foreground ,green :height 1.35))))
   `(org-document-title ((,class (:weight bold :foreground ,orange :height 1.35))))
   `(org-done ((,class (:foreground ,green :bold t :background ,green))))
   `(org-ellipsis ((,class (:foreground ,light-grey-one))))
   `(org-footnote ((,class (:foreground ,cyan))))
   `(org-formula ((,class (:foreground ,red))))
   `(org-hide ((,class (:foreground ,background :background ,background))))
   `(org-link ((,class (:foreground ,blue :underline t))))
   `(org-scheduled ((,class (:foreground ,green))))
   `(org-scheduled-previously ((,class (:foreground ,orange))))
   `(org-scheduled-today ((,class (:foreground ,green))))
   `(org-special-keyword ((,class (:foreground ,light-grey-one))))
   `(org-table ((,class (:foreground ,foreground :background ,background))))
   `(org-todo ((,class (:foreground ,orange :bold t))))
   `(org-upcoming-deadline ((,class (:foreground ,orange))))
   `(org-warning ((,class (:weight bold :foreground ,red))))
   `(org-block-begin-line ((,class (:foreground ,blue :background ,background :underline ,red))))
   `(org-block-end-line ((,class (:foreground ,blue :background ,background :overline ,red))))

   `(org-level-1 ((,class (:inherit nil
                                    :overline ,light-grey-one
                                    :foreground ,light-grey-two
                                    :background ,red
                                    :weight bold
                                    :height 1.3))))
   `(org-level-2 ((,class (:inherit nil
                                    :foreground ,blue
                                    :background ,light-grey-one
                                    :overline ,red
                                    :height 1.2))))
   `(org-level-3 ((,class (:inherit nil :foreground ,green :height 1.1))))
   `(org-level-4 ((,class (:inherit nil :foreground ,orange :height 1.0))))
   `(org-level-5 ((,class (:inherit nil :foreground ,blue))))
   `(org-level-6 ((,class (:inherit nil :foreground ,blue))))
   `(org-level-7 ((,class (:inherit nil :foreground ,blue))))
   `(org-level-8 ((,class (:inherit nil :foreground ,purple))))
   `(org-level-9 ((,class (:inherit nil :foreground ,blue))))

   ;; Outline, general outline mode for Emacs

   `(outline-1 ((t (:foreground ,cyan))))
   `(outline-2 ((t (:foreground ,blue))))
   `(outline-3 ((t (:foreground ,purple))))
   `(outline-4 ((t (:foreground ,yellow))))
   `(outline-5 ((t (:foreground ,orange))))
   `(outline-6 ((t (:foreground ,red))))

   ;; Powerline

   `(powerline-active1 ((t (:foreground ,foreground :background ,dark-grey-two))))
   `(powerline-active2 ((t (:foreground ,foreground :background ,inactive-gray))))
   `(powerline-inactive1 ((t (:foreground ,light-grey-one :background ,dark-grey-two))))
   `(powerline-inactive2 ((t (:foreground ,light-grey-one :background ,dark-grey-two))))

   ;; Python-specific overrides
   `(py-builtins-face ((,class (:foreground ,green :weight normal))))

   ;; Rainbow delimiters: parenthesis, brackets, ...

   `(rainbow-delimiters-depth-1-face ((t (:foreground ,dark-grey-two))))
   `(rainbow-delimiters-depth-2-face ((t (:foreground ,cyan))))
   `(rainbow-delimiters-depth-3-face ((t (:foreground ,green))))
   `(rainbow-delimiters-depth-4-face ((t (:foreground ,blue))))
   `(rainbow-delimiters-depth-5-face ((t (:foreground ,purple))))
   `(rainbow-delimiters-depth-6-face ((t (:foreground ,yellow))))
   `(rainbow-delimiters-depth-7-face ((t (:foreground ,orange))))
   `(rainbow-delimiters-depth-8-face ((t (:foreground ,red))))
   `(rainbow-delimiters-depth-9-face ((t (:foreground ,cyan))))
   `(rainbow-delimiters-depth-10-face ((t (:foreground ,green))))
   `(rainbow-delimiters-depth-11-face ((t (:foreground ,blue))))
   `(rainbow-delimiters-depth-12-face ((t (:foreground ,purple))))

   ;; Show parenthesis mode

   `(show-paren-mismatch ((t (:foreground ,yellow :background ,red :weight bold))))
   `(show-paren-match ((t (:foreground ,foreground :background ,red :weight bold))))

   ;; ansi-term, terminal

   `(term-color-black ((t (:foreground ,background :background ,background))))
   `(term-color-red ((t (:foreground ,red :background ,red))))
   `(term-color-green ((t (:foreground ,green :background ,green))))
   `(term-color-yellow ((t (:foreground ,yellow :background ,yellow))))
   `(term-color-blue ((t (:foreground ,blue :background ,blue))))
   `(term-color-magenta ((t (:foreground ,purple :background ,purple))))
   `(term-color-cyan ((t (:foreground ,cyan :background ,cyan))))
   `(term-color-white ((t (:foreground ,foreground :background ,foreground))))
   '(term-default-fg-color ((t (:inherit term-color-white))))
   '(term-default-bg-color ((t (:inherit term-color-black))))

   ;; Web mode

   `(web-mode-builtin-face ((t (:inherit ,font-lock-builtin-face))))
   `(web-mode-comment-face ((t (:inherit ,font-lock-comment-face))))
   `(web-mode-constant-face ((t (:inherit ,font-lock-constant-face))))
   `(web-mode-css-at-rule-face ((t (:foreground ,orange ))))
   `(web-mode-css-prop-face ((t (:foreground ,orange))))
   `(web-mode-css-pseudo-class-face ((t (:foreground ,yellow :weight bold))))
   `(web-mode-css-rule-face ((t (:foreground ,blue))))
   `(web-mode-doctype-face ((t (:inherit ,font-lock-comment-face))))
   `(web-mode-folded-face ((t (:underline t))))
   `(web-mode-function-name-face ((t (:foreground ,background :weight bold))))
   `(web-mode-html-attr-name-face ((t (:foreground ,purple))))
   `(web-mode-html-attr-value-face ((t (:inherit ,font-lock-string-face))))
   `(web-mode-html-tag-face ((t (:foreground ,cyan :weight bold))))
   `(web-mode-keyword-face ((t (:inherit ,font-lock-keyword-face))))
   `(web-mode-preprocessor-face ((t (:inherit ,font-lock-preprocessor-face))))
   `(web-mode-string-face ((t (:inherit ,font-lock-string-face))))
   `(web-mode-type-face ((t (:inherit ,font-lock-type-face))))
   `(web-mode-variable-name-face ((t (:inherit ,font-lock-variable-name-face))))
   `(web-mode-server-background-face ((t (:background ,foreground))))
   `(web-mode-server-comment-face ((t (:inherit web-mode-comment-face))))
   `(web-mode-server-string-face ((t (:foreground ,red))))
   `(web-mode-symbol-face ((t (:inherit font-lock-constant-face))))
   `(web-mode-warning-face ((t (:inherit font-lock-warning-face))))
   `(web-mode-whitespaces-face ((t (:background ,red))))
   `(web-mode-block-face ((t (:background "gray88"))))
   `(web-mode-current-element-highlight-face ((t (:inverse-video t))))

   ;; Whitespace mode

   `(whitespace-space ((t (:background ,foreground :foreground ,yellow))))
   `(whitespace-hspace ((t (:background ,foreground :foreground ,yellow))))
   `(whitespace-tab ((t (:background ,orange))))
   `(whitespace-newline ((t (:foreground ,yellow))))
   `(whitespace-trailing ((t (:background ,red))))
   `(whitespace-line ((t (:background nil :foreground ,red))))
   `(whitespace-space-before-tab ((t (:background ,foreground :foreground ,red))))
   `(whitespace-indentation ((t (:background ,foreground :foreground ,yellow))))
   `(whitespace-empty ((t (:background ,yellow))))
   `(whitespace-space-after-tab ((t (:background ,foreground :foreground ,red))))

   ))

;;
;; Theme Variables
;;

(material-design/with-color-variables
  (custom-theme-set-variables
   'material-design

   ;; ANSI Color

   `(ansi-color-names-vector [,foreground
                              ,red
                              ,green
                              ,yellow
                              ,blue
                              ,purple
                              ,cyan
                              ,background])

   ;; Highlight parenthesis

   `(hl-paren-colors '(,foreground ,foreground ,orange))
   `(hl-paren-background-colors '(,blue ,light-grey-two nil))
   ))

;;;###autoload
(and load-file-name
     (boundp 'custom-theme-load-path)
     (add-to-list 'custom-theme-load-path
                  (file-name-as-directory
                   (file-name-directory load-file-name))))

(provide-theme 'material-design)

;; Local Variables:
;; no-byte-compile: t
;; indent-tabs-mode: nil
;; End:
;;; material-design-theme.el ends here
